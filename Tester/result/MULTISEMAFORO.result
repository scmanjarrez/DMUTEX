A: [EVENT]-> A{TICK} B{--} C{--}
B: [EVENT]-> A{--} B{TICK} C{--}
C: [EVENT]-> A{--} B{--} C{TICK}
# A solicita los semaforos S1 y S2
A: [LOCK S1]-> A{TICK|SEND(LOCK,B)|SEND(LOCK,C)} B{--} C{--}
A: [GETCLOCK]-> A{LC[2,0,0]} B{--} C{--}
A: [LOCK S2]-> A{TICK|SEND(LOCK,B)|SEND(LOCK,C)} B{--} C{--}
A: [GETCLOCK]-> A{LC[3,0,0]} B{--} C{--}
# B Concede los dos semaforos
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,B)|TICK} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,B)|TICK} B{--} C{--}
# C Concede los dos semaforos
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)}
A: [RECEIVE]-> A{RECEIVE(OK,C)|TICK|MUTEX(S1)} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,C)|TICK|MUTEX(S2)} B{--} C{--}
# A consigue S1 y S2
A: [EVENT]-> A{TICK} B{--} C{--}
# B y C solicitan S3 y S2 (respectivamente)
B: [LOCK S3]-> A{--} B{TICK|SEND(LOCK,A)|SEND(LOCK,C)} C{--}
B: [GETCLOCK]-> A{--} B{LC[3,6,0]} C{--}
C: [LOCK S2]-> A{--} B{--} C{TICK|SEND(LOCK,A)|SEND(LOCK,B)}
C: [GETCLOCK]-> A{--} B{--} C{LC[3,0,6]}
A: [RECEIVE]-> A{RECEIVE(LOCK,B)|TICK|TICK|SEND(OK,B)} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(LOCK,C)|TICK} B{--} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,C)|TICK|TICK|SEND(OK,C)} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,B)|TICK|TICK|SEND(OK,B)}
# C recibe sólo un OK (falta A)
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,B)|TICK}
# B consigue S3 porque está libre
B: [RECEIVE]-> A{--} B{RECEIVE(OK,A)|TICK} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,C)|TICK|MUTEX(S3)} C{--}
B: [EVENT]-> A{--} B{TICK} C{--}
# B libera el semáforo S3 y solicita S2
B: [UNLOCK S3]-> A{--} B{--} C{--}
B: [LOCK S2]-> A{--} B{TICK|SEND(LOCK,A)|SEND(LOCK,C)} C{--}
B: [GETCLOCK]-> A{--} B{LC[10,12,8]} C{--}
A: [RECEIVE]-> A{RECEIVE(LOCK,B)|TICK} B{--} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,B)|TICK}
# A libera los dos semaforos
A: [UNLOCK S1]-> A{--} B{--} C{--}
A: [UNLOCK S2]-> A{TICK|SEND(OK,C)|SEND(OK,B)} B{--} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,A)|TICK} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,A)|TICK|MUTEX(S2)}
# Entra C que estaba esperando con anterioridad.
C: [UNLOCK S2]-> A{--} B{--} C{TICK|SEND(OK,B)}
# C libera S2 y entra B
B: [RECEIVE]-> A{--} B{RECEIVE(OK,C)|TICK|MUTEX(S2)} C{--}
B: [UNLOCK S2]-> A{--} B{--} C{--}
