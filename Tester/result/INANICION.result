A: [EVENT]-> A{TICK} B{--} C{--}
B: [EVENT]-> A{--} B{TICK} C{--}
C: [LOCK SEM]-> A{--} B{--} C{TICK|SEND(LOCK,A)|SEND(LOCK,B)}
C: [GETCLOCK]-> A{--} B{--} C{LC[0,0,1]}
A: [LOCK SEM]-> A{TICK|SEND(LOCK,B)|SEND(LOCK,C)} B{--} C{--}
# Por prioridad de PID entraría A 
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)}
A: [RECEIVE]-> A{RECEIVE(LOCK,C)|TICK} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,C)|TICK} B{--} C{--}
# B Responde OK a A y C
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,C)|TICK|TICK|SEND(OK,C)} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,B)|TICK|MUTEX(SEM)} B{--} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,B)|TICK}
# A obtiene el semaforo
B: [LOCK SEM]-> A{--} B{TICK|SEND(LOCK,A)|SEND(LOCK,C)} C{--}
B: [GETCLOCK]-> A{--} B{LC[2,6,1]} C{--}
# C recibirá el mensaje pero no 
# respondera (C tiene prioridad)
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,B)|TICK|TICK|SEND(OK,B)}
# A termina 
A: [UNLOCK SEM]-> A{TICK|SEND(OK,C)} B{--} C{--}
# A daría paso a C
A: [RECEIVE]-> A{RECEIVE(LOCK,B)|TICK|TICK|SEND(OK,B)} B{--} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,A)|TICK|MUTEX(SEM)}
# C entra en la región
C: [UNLOCK SEM]-> A{--} B{--} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,C)|TICK} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,A)|TICK|MUTEX(SEM)} C{--}
B: [UNLOCK SEM]-> A{--} B{--} C{--}
