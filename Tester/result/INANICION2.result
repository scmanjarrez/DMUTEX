A: [EVENT]-> A{TICK} B{--} C{--}
B: [EVENT]-> A{--} B{TICK} C{--}
C: [LOCK SEM]-> A{--} B{--} C{TICK|SEND(LOCK,A)|SEND(LOCK,B)}
C: [GETCLOCK]-> A{--} B{--} C{LC[0,0,1]}
A: [LOCK SEM]-> A{TICK|SEND(LOCK,B)|SEND(LOCK,C)} B{--} C{--}
# B Responde OK a A y C
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,C)|TICK|TICK|SEND(OK,C)} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)} C{--}
# Por prioridad de PID entraría A 
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,A)|TICK|TICK|SEND(OK,A)}
# A recibiría:
# - LOCK(C) -> encola petición
# - OK(B) y OK(C) -> cierra mutex
# A obtiene el semaforo
A: [RECEIVE]-> A{RECEIVE(LOCK,C)|TICK} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,B)|TICK} B{--} C{--}
A: [RECEIVE]-> A{RECEIVE(OK,C)|TICK|MUTEX(SEM)} B{--} C{--}
# C recibe el OK de B (falt A que esta en la
# región crítica).
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,B)|TICK}
# Ahora B tambien quiere entrar en la región.
B: [LOCK SEM]-> A{--} B{TICK|SEND(LOCK,A)|SEND(LOCK,C)} C{--}
B: [GETCLOCK]-> A{--} B{LC[2,6,1]} C{--}
# C recibirá el mensaje pero no 
# respondera (C tiene prioridad) -> encola pecición.
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(LOCK,B)|TICK|TICK|SEND(OK,B)}
# A no responde porque está en la 
# región crítica (encola la petición) 
A: [RECEIVE]-> A{RECEIVE(LOCK,B)|TICK} B{--} C{--}
# A termina (debe liberar los dos mensajes que tiene
# encolados a esperas de entrar en la región).
A: [UNLOCK SEM]-> A{TICK|SEND(OK,C)|SEND(OK,B)} B{--} C{--}
C: [RECEIVE]-> A{--} B{--} C{RECEIVE(OK,A)|TICK|MUTEX(SEM)}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,C)|TICK} C{--}
# C entra en la región
C: [UNLOCK SEM]-> A{--} B{--} C{--}
B: [RECEIVE]-> A{--} B{RECEIVE(OK,A)|TICK|MUTEX(SEM)} C{--}
B: [UNLOCK SEM]-> A{--} B{--} C{--}
